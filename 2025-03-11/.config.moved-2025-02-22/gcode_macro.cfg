# QIDI Plus4 V1.0.0

[gcode_macro M141]
gcode:
    {% if printer["heater_generic chamber"] is defined %}
        {% set s = params.S|float %}
        SET_HEATER_TEMPERATURE HEATER=chamber TARGET={([s, 65]|min)}
    {% endif %}

[gcode_macro M191]
gcode:
    {% if printer["heater_generic chamber"] is defined %}
        {% set s = params.S|float %}
    
        M141 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  
        {% if s != 0 %}
            TEMPERATURE_WAIT SENSOR="heater_generic chamber" MINIMUM={([s, 65]|min)-2}
        {% endif %}
    {% endif %}
     
[gcode_macro M303]
gcode:
    {% if params.E is defined %}
     {% if params.S is defined %}
        {% if (params.E|int)==-1 %} 
         PID_CALIBRATE HEATER=heater_bed TARGET={params.S|int}
        {% endif %}
        {% if (params.E|int)==0 %}
         PID_CALIBRATE HEATER=extruder TARGET={params.S|int}
        {% endif %}
     {% endif %}
  {% endif %}

[gcode_macro M900]
gcode:
    {% if params.K is defined %} 
          SET_PRESSURE_ADVANCE ADVANCE={params.K}
    {% endif %}  
    {% if params.T is defined %}    
       SET_PRESSURE_ADVANCE SMOOTH_TIME={params.T}
    {% endif %} 

[gcode_macro M290]
gcode:
   SET_GCODE_OFFSET Z_ADJUST={params.Z}

[gcode_macro M0]
gcode:
    PAUSE

[gcode_macro M25]
rename_existing: M9925
gcode:
    PAUSE

[gcode_macro RESPOND_INFO]
variable_S:0
gcode:
    {% if params.S is defined %}
        {% set s = params.S|int %}
        {% if s == 0 %}
            { action_respond_info("Nozzle cooled")  }
        {% endif %}
    {% endif %}

[gcode_macro M4027]
gcode:
    { action_respond_info("M4027 called")  }
    G32                                     # Set bed meshing to default profile
    G29                                     # Do full homing, z-tilt, and bed meshing
    G31                                     # Set bed meshing back to kamp profile
    M400                                    # Wait for all outstanding G-code moves to finish
    M118 Bed mesh calibrate complete        # Tell xindi we're done
    SAVE_CONFIG

[gcode_macro M4028]
gcode:
    G28 
    get_zoffset
    M400
    M118 Position init complete
    
[gcode_macro M4029]
gcode:
    M104 S140
    SAVE_VARIABLE VARIABLE=z_offset VALUE=0
    G28 
    M400
    M118 Position init complete

    CLEAR_NOZZLE HOTEND=280
    G28
    get_zoffset

[gcode_macro M4030]
gcode:    
    BED_MESH_CLEAR      
    SET_GCODE_OFFSET Z=0 MOVE=0
    G28
    get_zoffset
    G1 X150 Y150 F9000
    G1 Z0 F600

[gcode_macro M4031]
gcode:
    SET_KINEMATIC_POSITION Z=20
    G1 Z30 F300
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer.configfile.settings['tmc2209 stepper_z'].run_current * 0.7 }
    SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer.configfile.settings['tmc2209 stepper_z1'].run_current * 0.7 }
    REVERSE_HOMING
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer.configfile.settings['tmc2209 stepper_z'].run_current}
    SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer.configfile.settings['tmc2209 stepper_z1'].run_current}
    G91
    G1 Z-30 F600
    G90

    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer.configfile.settings['tmc2209 stepper_z'].run_current * 0.7 }
    SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer.configfile.settings['tmc2209 stepper_z1'].run_current * 0.7 }
    REVERSE_HOMING
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer.configfile.settings['tmc2209 stepper_z'].run_current}
    SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer.configfile.settings['tmc2209 stepper_z1'].run_current}
    G91
    G1 Z-30 F600
    G90

[gcode_macro M109]
rename_existing: M99109
gcode:
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
    {% endif %}

[gcode_macro M204]
rename_existing: M99204
gcode:
    {% if params.S is defined %}
        {% set s = params.S|float %}
    {% endif %}
    {% if params.P is defined %}
    {% if params.T is defined %}
        {% set s = [params.P|float ,params.T|float] | min %}
    {% endif %}
    {% endif %}

    SET_VELOCITY_LIMIT ACCEL={s}
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={s/2}
